import { getServerSession } from "next-auth";
import { connectMongoDB } from "../../../../lib/mongodb";
import Resource from "../../../../models/resource";
import User from "../../../../models/user";
import { NextResponse } from "next/server";
import { authOptions } from "../../auth/[...nextauth]/route";
import axios from "axios";

export async function DELETE(request) {
    const { ids } = await request.json(); // Get the IDs from the request body
    const session = await getServerSession(authOptions);

    if (!session) {
        return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }

    const userEmail = session.user.email;
    await connectMongoDB();

    // GitHub API credentials and details
    const GITHUB_API_URL = "https://api.github.com";
    const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
    const OWNER = "Ayoub-Elkhouzari";
    const REPO = "Resources";
    const BRANCH = "main";

    const deletePromises = ids.map(async (id) => {
        // Find the resource in MongoDB
        const resource = await Resource.findById(id);
        if (!resource) {
            throw new Error(`Resource not found for ID: ${id}`);
        }

        // Extract the path from the GitHub URL
        const resourcePath = resource.path.split("main/")[1];

        try {
            // Fetch the resource's SHA value from GitHub
            const getResourceResponse = await axios.get(
                `${GITHUB_API_URL}/repos/${OWNER}/${REPO}/contents/${resourcePath}`,
                {
                    headers: {
                        Authorization: `token ${GITHUB_TOKEN}`
                    }
                }
            );

            const resourceSHA = getResourceResponse.data.sha;

            // Prepare payload for GitHub delete request
            const deletePayload = {
                message: `Delete ${resource.name} from QWAZE`,
                sha: resourceSHA,
                branch: BRANCH
            };

            // Send a DELETE request to GitHub to remove the resource
            await axios.delete(`${GITHUB_API_URL}/repos/${OWNER}/${REPO}/contents/${resourcePath}`, {
                headers: {
                    Authorization: `token ${GITHUB_TOKEN}`
                },
                data: deletePayload
            });

            // Remove the resource from the user's 'resources' array
            await User.findOneAndUpdate(
                { email: userEmail },
                { $pull: { resources: id } },
                { new: true }
            );

            // Delete the resource from the Resource collection
            await Resource.findByIdAndDelete(id);
        } catch (error) {
            console.error(`Error deleting resource ID ${id}:`, error);
            throw new Error(`Error deleting resource ID ${id}: ${error.message}`);
        }
    });

    try {
        await Promise.all(deletePromises); // Wait for all delete operations to complete
        return NextResponse.json(
            { message: "Resources deleted from GitHub and MongoDB" },
            { status: 200 }
        );
    } catch (error) {
        console.error("Error deleting resources:", error);
        return NextResponse.json(
            { message: "Error deleting resources", error: error.message },
            { status: 500 }
        );
    }
}
