export async function DELETE(request) {
    const { ids } = await request.json(); // Get the IDs from the request body
    const session = await getServerSession(authOptions);

    if (!session) {
        return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }

    const userEmail = session.user.email;
    await connectMongoDB();

    const deletePromises = ids.map(async (id) => {
        const resource = await Resource.findById(id);
        if (!resource) {
            throw new Error(`Resource not found for ID: ${id}`);
        }

        const resourcePath = resource.path.split("main/")[1];
        
        // Function to delete resource with retry logic
        const deleteResourceWithRetry = async () => {
            try {
                // Fetch the resource's SHA value from GitHub
                const getResourceResponse = await axios.get(
                    `${GITHUB_API_URL}/repos/${OWNER}/${REPO}/contents/${resourcePath}`,
                    {
                        headers: {
                            Authorization: `token ${GITHUB_TOKEN}`
                        }
                    }
                );

                const resourceSHA = getResourceResponse.data.sha;

                // Prepare payload for GitHub delete request
                const deletePayload = {
                    message: `Delete ${resource.name} from QWAZE`,
                    sha: resourceSHA,
                    branch: BRANCH
                };

                // Send a DELETE request to GitHub to remove the resource
                await axios.delete(`${GITHUB_API_URL}/repos/${OWNER}/${REPO}/contents/${resourcePath}`, {
                    headers: {
                        Authorization: `token ${GITHUB_TOKEN}`
                    },
                    data: deletePayload
                });

                // Remove the resource from the user's 'resources' array
                await User.findOneAndUpdate(
                    { email: userEmail },
                    { $pull: { resources: id } },
                    { new: true }
                );

                // Delete the resource from the Resource collection
                await Resource.findByIdAndDelete(id);
            } catch (error) {
                console.error(`Error deleting resource ID ${id}:`, error);
                
                // If the error is a 409, retry once
                if (error.response && error.response.status === 409) {
                    console.log(`Retrying delete for resource ID ${id} due to 409 Conflict...`);
                    await deleteResourceWithRetry(); // Retry the deletion
                } else {
                    throw new Error(`Error deleting resource ID ${id}: ${error.message}`);
                }
            }
        };

        return deleteResourceWithRetry(); // Call the function to delete resource
    });

    try {
        await Promise.all(deletePromises);
        return NextResponse.json(
            { message: "Resources deleted from GitHub and MongoDB" },
            { status: 200 }
        );
    } catch (error) {
        console.error("Error deleting resources:", error);
        return NextResponse.json(
            { message: "Error deleting resources", error: error.message },
            { status: 500 }
        );
    }
}
